{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/app.routing.mode.ts","webpack:///src/app/auth/auth-interceptor.ts","webpack:///src/app/auth/auth.guard.ts","webpack:///src/app/auth/auth.service.ts","webpack:///src/app/auth/login/login.component.ts","webpack:///src/app/auth/login/login.component.html","webpack:///src/app/auth/signup/signup.component.ts","webpack:///src/app/auth/signup/signup.component.html","webpack:///src/app/header/header.component.ts","webpack:///src/app/header/header.component.html","webpack:///src/app/posts/post-create/post-create.component.ts","webpack:///src/app/posts/post-create/post-create.component.html","webpack:///src/app/posts/post-list/post-list.component.ts","webpack:///src/app/posts/post-list/post-list.component.html","webpack:///src/app/posts/posts.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","serve","autoAuthuser","selector","templateUrl","styleUrls","AppModule","provide","useClass","multi","declarations","imports","providers","bootstrap","routes","path","component","canActivate","AppRouteModule","forRoot","AuthInterceptor","authService","next","authToken","gettoken","authRequest","clone","headers","set","handle","AuthGuard","router","authserv","route","state","isauth","getisauth","navigate","AuthService","http","isauthenticate","authStatusListner","asObservable","token","username","password","email","address","authData","post","subscribe","respo","console","log","expiresInduration","expiresIn","setAuthTimer","now","Date","expirationDate","getTime","saveAuthData","duration","tokenTimes","setTimeout","logout","authinfo","getauthdat","expirationInDate","localStorage","setItem","toISOString","removeItem","clearTimeout","clearAuthData","getItem","expirationDatels","providedIn","LoginComponent","authservice","isLoading","form","invalid","login","value","SignupComponent","createUser","HeaderComponent","authserve","userauthincation","authlistnersub","getauthstatuslistner","authenicted","unsubscribe","PostCreateComponent","postsService","enteredTitle","enteredbody","enteredauthor","isloading","mode","addPost","title","body","author","reset","PostListComponent","Authserv","posts","totalPost","postperpage","currentpage","pagesieoption","getPosts","postsSub","getPostUpdateListener","postData","postCount","pagevent","pageIndex","pageSize","PostsService","postsUpdated","postperchange","queryParams","get","pipe","map","_id","maxPosts","transformedPostsData","content","responseData","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from './auth/auth.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n constructor(private serve:AuthService){}\n  ngOnInit() {\n  this.serve.autoAuthuser();\n  }\n\n}\n","<app-header></app-header>\n<main>\n<router-outlet></router-outlet>\n</main>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport{ ReactiveFormsModule} from '@angular/forms';\nimport {\n  MatInputModule,\n  MatCardModule,\n  MatButtonModule,\n  MatToolbarModule,\n  MatProgressSpinnerModule,\n  MatExpansionModule,\n  MatPaginatorModule\n} from '@angular/material';\n\nimport { AppComponent } from './app.component';\nimport { PostCreateComponent } from './posts/post-create/post-create.component';\nimport { HeaderComponent } from './header/header.component';\nimport { PostListComponent } from './posts/post-list/post-list.component';\nimport { AppRouteModule } from './app.routing.mode';\nimport { LoginComponent } from './auth/login/login.component';\nimport { SignupComponent } from './auth/signup/signup.component';\nimport { AuthInterceptor } from './auth/auth-interceptor';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PostCreateComponent,\n    HeaderComponent,\n    PostListComponent,\n    LoginComponent,\n    SignupComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    MatInputModule,\n    MatCardModule,\n    MatButtonModule,\n    ReactiveFormsModule,\n    MatToolbarModule,\n    MatExpansionModule,\n    MatPaginatorModule,\n    HttpClientModule,\n    AppRouteModule,\n    MatProgressSpinnerModule\n  ],\n  providers: [{provide:HTTP_INTERCEPTORS,useClass:AuthInterceptor,multi:true}],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport { PostListComponent } from './posts/post-list/post-list.component';\r\nimport { PostCreateComponent } from './posts/post-create/post-create.component';\r\nimport { LoginComponent } from './auth/login/login.component';\r\nimport { SignupComponent } from './auth/signup/signup.component';\r\nimport { AuthGuard } from './auth/auth.guard';\r\nconst routes: Routes = [\r\n    {path: '', component: PostListComponent},\r\n    {path: 'create', component: PostCreateComponent,canActivate:[AuthGuard]},\r\n    {path: 'login', component: LoginComponent},\r\n    {path: 'signup', component: SignupComponent}\r\n];    \r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes)],\r\n    exports: [RouterModule],\r\n    providers:[AuthGuard]\r\n\r\n})\r\nexport class AppRouteModule {}\r\n","import { HttpInterceptor , HttpRequest, HttpHandler} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\nimport { CdkStepperNext } from '@angular/cdk/stepper';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n constructor(private authService: AuthService) {}\r\n    intercept(req: HttpRequest<any>, next: HttpHandler){\r\n        const authToken = this.authService.gettoken();\r\n       const authRequest = req.clone({\r\n      headers: req.headers.set('authorization','Bearer ' + authToken)\r\n     })\r\n      return next.handle(authRequest);\r\n    }\r\n}\r\n","import { CanActivate ,ActivatedRouteSnapshot,RouterStateSnapshot,UrlTree, Router} from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\n@Injectable()\r\nexport  class AuthGuard implements CanActivate{\r\n  constructor(private router:Router,private authserv:AuthService){}\r\n    canActivate(route: ActivatedRouteSnapshot,\r\n         state: RouterStateSnapshot):\r\n          boolean  | Observable<boolean> | Promise<boolean> {\r\n      const isauth=this.authserv.getisauth();\r\n\r\n    if (!isauth){\r\n      this.router.navigate(['/login']);\r\n    }      \r\n      return isauth;\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AuthData, AuthData1 } from './auth-data.model';\r\nimport { Subject } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport { DataRowOutlet } from '@angular/cdk/table';\r\n\r\n@Injectable({\r\n    providedIn: 'root'})\r\n\r\n\r\nexport class AuthService{\r\n    constructor(private http: HttpClient,private router: Router){}\r\n  private token :string;\r\n  private tokenTimes:any;\r\n  isauthenticate=false;\r\n  private authStatusListner=new Subject<boolean>();\r\ny\r\ngetauthstatuslistner(){\r\n    return this.authStatusListner.asObservable();\r\n}\r\n    gettoken(){\r\n        return this.token;\r\n    }   \r\n     createUser(username:string,password:string,email:string,address:string){\r\n    const authData: AuthData1={username:username,password:password,email:email,address:address};\r\n    this.http.post('register',authData).subscribe((respo)=>{\r\n   console.log(respo);\r\n   this.router.navigate(['/login']);\r\n    })\r\n}\r\nlogin(email:string,password:string){\r\n    const authData:AuthData={email:email,password:password};\r\n    this.http.post<{message:string,token:string,expiresIn:number}>('login',authData).subscribe((respo)=>{\r\n   console.log(respo);\r\n   const token=respo.token;\r\n   this.token=token;\r\n   if(token){\r\n       const expiresInduration=respo.expiresIn;\r\n      console.log(expiresInduration);\r\n     this.setAuthTimer(expiresInduration);\r\n      const now=new Date();\r\n      const expirationDate=new Date(now.getTime()+expiresInduration*1000);\r\n     console.log(expirationDate);\r\n      this.saveAuthData(token,expirationDate);\r\n       this.isauthenticate=true;\r\n       \r\n   this.authStatusListner.next(true);\r\n  this.router.navigate(['/']);\r\n}});\r\n}\r\nprivate setAuthTimer(duration:number){\r\n    console.log('setting time',duration);\r\n    this.tokenTimes= setTimeout(()=>{\r\n        this.logout();\r\n              },duration*1000);\r\n}\r\nautoAuthuser(){\r\nconst authinfo=this.getauthdat();\r\nif(!authinfo){\r\n    return;\r\n}\r\nconst now=new Date();\r\nconst expiresIn=authinfo.expirationDate.getTime()-now.getTime();\r\nconsole.log(authinfo,expiresIn);\r\nif(expiresIn>0){\r\n    this.token=authinfo.token;\r\n    this.isauthenticate=true;\r\n    this.setAuthTimer(expiresIn/1000);\r\n    this.authStatusListner.next(true);\r\n}\r\n}\r\n\r\nprivate saveAuthData(token:string,expirationInDate:Date)\r\n{\r\nlocalStorage.setItem('token',token);\r\nlocalStorage.setItem('expiration',expirationInDate.toISOString());\r\n}\r\nprivate clearAuthData(){\r\nlocalStorage.removeItem('token');\r\nlocalStorage.removeItem('expiration');\r\n}\r\n\r\ngetisauth()\r\n{\r\n    return this.isauthenticate;\r\n}\r\nlogout(){\r\n   this.token=null;\r\n   this.isauthenticate=false; \r\n   this.authStatusListner.next(false);\r\n   clearTimeout(this.tokenTimes);\r\n   this.clearAuthData();\r\n   this.router.navigate(['/']);\r\n\r\n}\r\nprivate getauthdat(){\r\n    const token=localStorage.getItem('token');\r\n    const expirationDatels=localStorage.getItem('expiration');\r\n    if(!token  || !expirationDatels)\r\n    {\r\nreturn;\r\n    }return{\r\n        token:token,\r\n        expirationDate:new Date(expirationDatels)\r\n    }\r\n\r\n}\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { AuthService } from '../auth.service';\n\n@Component({\n \n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n isLoading=false;\n constructor(public authservice: AuthService) { }\n\n  ngOnInit() {\n  }\nonLogin(form: NgForm){\n \nif (form.invalid) {\n  return;\n}\nthis.isLoading=true;\nthis.authservice.login(form.value.email, form.value.password);\n}\n}\n\n\n","<mat-card>\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n    <form (submit)=\"onLogin(loginform)\" #loginform=\"ngForm\" *ngIf=\"!isLoading\">\n      <mat-form-field>\n        <input\n          matInput\n          type=\"email\"\n        ngModel\n          placeholder=\"E-MAIL\"\n          name=\"email\"\n          #emailinput=\"ngModel\"\n          required email>  \n        <mat-error *ngIf=\"emailinput.invalid\">Please enter a valid email.</mat-error>\n      </mat-form-field>\n\n      <mat-form-field>\n        <input type=\"password\"\n          matInput  \n          placeholder=\"Password please\"\n          ngModel\n          name=\"password\"\n          #passwordinput=\"ngModel\"\nrequired\n         >\n        <mat-error *ngIf=\"passwordinput.invalid\">Please enter valid password.</mat-error>\n      </mat-form-field>\n      <button\n        mat-raised-button\n        color=\"accent\"\n        type=\"submit\" \n        *ngIf='!isLoading'>Login</button>\n   \n  \n  </form>\n  </mat-card>\n  ","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { AuthService } from '../auth.service';\n\n@Component({\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n\n  isLoading = false;\n  constructor(public authservice: AuthService) { }\n\n  ngOnInit() {\n  }\nonSignup(form: NgForm) {\nif (form.invalid) {\n  return;\n}\nthis.isLoading=true;\nthis.authservice.createUser(form.value.username,form.value.password,form.value.email, form.value.address);\n}\n}\n","<mat-card>\n  <mat-spinner *ngIf='isLoading'></mat-spinner>\n    <form (submit)=\"onSignup(signupform)\" #signupform=\"ngForm\" *ngIf=\"!isLoading\">\n      <mat-form-field>\n        <input\n        matInput\n        type=\"username\"\n      ngModel\n        placeholder=\"username\"\n        name=\"username\"\n        #usernameinput=\"ngModel\"\n        required>  \n      <mat-error *ngIf=\"usernameinput.invalid\">Please enter a valid username.</mat-error>\n    </mat-form-field>\n \n      <mat-form-field>\n        <input type=\"password\"\n          matInput  \n          placeholder=\"Password please\"\n          ngModel\n          name=\"password\"\n          #passwordinput=\"ngModel\"\n         required>\n        <mat-error *ngIf=\"passwordinput.invalid\">Please enter valid password.</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input\n          matInput\n          type=\"email\"\n        ngModel\n          placeholder=\"E-MAIL\"\n          name=\"email\"\n          #emailinput=\"ngModel\"\n          required email>  \n        <mat-error *ngIf=\"emailinput.invalid\">Please enter a valid email.</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input\n        matInput\n        type=\"address\"\n      ngModel\n        placeholder=\"address\"\n        name=\"address\"\n        #addressinput=\"ngModel\"\n        required>  \n      <mat-error *ngIf=\"addressinput.invalid\">Please enter a valid address.</mat-error>\n    </mat-form-field>\n      <button\n        mat-raised-button\n        color=\"accent\"\n        type=\"submit\" *ngIf='!isLoading'>Signup</button>\n      \n      </form>\n  </mat-card>\n  ","import { Component } from \"@angular/core\";\nimport { AuthService } from \"../auth/auth.service\";\nimport { Subscription } from \"rxjs\";\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent {\n  userauthincation=false;\n  private authlistnersub: Subscription;\n  constructor(private authserve:AuthService){\n  }\n\n  ngOnInit(){\n    this.userauthincation=this.authserve.getisauth();\nthis.authlistnersub =this.authserve.getauthstatuslistner().subscribe(authenicted=>{\nthis.userauthincation=authenicted;\n});\n  }\n  ngOnDestroy(){\nthis.authlistnersub.unsubscribe();\n  }\n  onlogout(){\n    this.authserve.logout();\n  }\n}\n","<mat-toolbar color=\"primary\"><span>\n  <a mat-button routerLink=\"/\">Articles</a>  \n</span>\n<span class=\"spacer\"></span>\n<ul *ngIf=\"userauthincation\">\n    <li>\n        <a mat-button routerLink=\"/create\" routerLinkActive=\"mat-accent\">Create</a>\n    </li>\n</ul>\n<ul *ngIf=\"!userauthincation\">\n  <li>\n      <a mat-button routerLink=\"/login\" routerLinkActive=\"mat-accent\">Login</a>\n  </li>\n</ul>\n<ul *ngIf=\"!userauthincation\">\n  <li>\n      <a mat-button routerLink=\"/signup\" routerLinkActive=\"mat-accent\">Signup</a>\n  </li>\n</ul>\n<ul *ngIf=\"userauthincation\">\n  <li>\n      <a mat-button mat-icon-button (click)=\"onlogout()\" >LogOut</a>\n  </li>\n</ul>\n</mat-toolbar>\n","import { Component, OnInit } from '@angular/core';\nimport { NgForm, FormGroup, RequiredValidator, Validators, FormControl } from '@angular/forms';\n\nimport { PostsService } from '../posts.service';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\nimport { Post } from '../post.model';\n\n@Component({\n  selector: 'app-post-create',\n  templateUrl: './post-create.component.html',\n  styleUrls: ['./post-create.component.css']\n})\nexport class PostCreateComponent implements OnInit {\n  enteredTitle = '';\n  enteredbody = '';\n  enteredauthor = '';\n  post: Post;\n\n  isloading = false;\n private mode = 'create';\n private postId: string;\n\n  constructor(public postsService: PostsService, public route: ActivatedRoute) {}\n  ngOnInit() {\n\n\n}\n\n  \n\n onAddPost(form: NgForm) {\n    if (form.invalid) {\n      return;\n    }\n    console.log(form.value);\n    this.isloading = true;\n    this.postsService.addPost(form.value.title,form.value.body,form.value.author);\n    form.reset();\n\n}\n}\n\n","\r\n<mat-card>\r\n    <mat-spinner *ngIf=\"isloading\"></mat-spinner>\r\n    <form (submit)=\"onAddPost(postForm)\" #postForm=\"ngForm\" *ngIf=\"!isloading\">\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          type=\"text\"\r\n          ngModel\r\n          name=\"title\"\r\n          placeholder=\"Articles Title\"\r\n          #title=\"ngModel\">  \r\n        <mat-error *ngIf=\"title.invalid\">Please enter a Articles title.</mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field>\r\n        <textarea\r\n          matInput\r\n          ngModel\r\n          name=\"body\"\r\n          placeholder=\"Articles contents\"\r\n          #body=\"ngModel\"></textarea>\r\n        <mat-error *ngIf=\"body.invalid\">Please enter a Articles CONTENT.</mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field>\r\n        <textarea\r\n          matInput\r\n          ngModel\r\n          name=\"author\"\r\n          placeholder=\"Author name\"\r\n          #author=\"ngModel\"></textarea>\r\n        <mat-error *ngIf=\"author.invalid\">Please enter a Articles Author.</mat-error>\r\n      </mat-form-field>\r\n      <button\r\n        mat-raised-button\r\n        color=\"accent\"\r\n        type=\"submit\">Save Post</button>\r\n    </form>\r\n  </mat-card>\r\n  ","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { Post } from '../post.model';\nimport { PostsService } from '../posts.service';\nimport { AuthService } from 'src/app/auth/auth.service';\nimport { PageEvent } from '@angular/material';\n\n@Component({\n  selector: 'app-post-list',\n  templateUrl: './post-list.component.html',\n  styleUrls: ['./post-list.component.css']\n})\nexport class PostListComponent implements OnInit, OnDestroy {\n \n  posts: Post[] = [];\n  totalPost=0;\n  private postsSub: Subscription;\n isloading=false;\n postperpage=2;\n currentpage=1;\n pagesieoption=[1,2,6,9]\n userauthincation=false;\n  private authlistnersub: Subscription;\n \n  constructor(public postsService: PostsService,private Authserv:AuthService) {}\n\n  ngOnInit() {\n    this.isloading=true;\n    this.postsService.getPosts(this.postperpage, this.currentpage);\n    this.postsSub = this.postsService.getPostUpdateListener()\n      .subscribe((postData: {posts:Post[],postCount:number}) => {\n        this.isloading=false;\n        this.posts = postData.posts;\n        this.totalPost=postData.postCount;\n        console.log(this.posts);  \n      });\n    this.userauthincation=this.Authserv.getisauth();\n    this.authlistnersub =this.Authserv.getauthstatuslistner().subscribe(authenicted=>{\n        this.userauthincation=authenicted;\n        });\n  }\n  \n  ngOnDestroy() {\n    this.postsSub.unsubscribe();\n    this.authlistnersub.unsubscribe();\n\n  }\n  onChangePage(pagevent: PageEvent)\n  {\n    this.isloading=true;\n this.currentpage=pagevent.pageIndex+1;\nthis.postperpage=pagevent.pageSize;\nthis.postsService.getPosts(this.postperpage, this.currentpage);\n    console.log(pagevent);\n\n  }\n}\n","<mat-spinner *ngIf=\"isloading\"></mat-spinner>\r\n<mat-accordion multi=\"true\" *ngIf=\"posts.length > 0 && !isloading\">\r\n  <mat-expansion-panel *ngFor=\"let post of posts\">\r\n    <mat-expansion-panel-header>\r\n      <p mat-color=\"green\">Title: </p> {{ post.title }}\r\n   </mat-expansion-panel-header>\r\n<p>Contents: </p> {{ post.body }}\r\n<br>\r\n<p>Author: </p> {{post.author}}\r\n</mat-expansion-panel> \r\n</mat-accordion>\r\n<mat-paginator [length]=\"totalPost\" [pageSize]=\"postperpage\" [pageSizeOptions]=\"pagesieoption\" (page)=\"onChangePage($event)\" *ngIf=\"posts.length > 0\"></mat-paginator>\r\n<p class=\"info-text mat-body-1\" *ngIf=\"posts.length <= 0 && !isloading\">No posts added yet!</p>\r\n\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Post ,Post1} from './post.model';\nimport { Router } from '@angular/router';\n\n@Injectable({ providedIn: 'root' })\nexport class PostsService {\n  private posts: Post[] = [];\n  private postsUpdated = new Subject<{posts: Post[], postCount: number}>();\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  getPosts(postperchange: number, currentpage: number) {\n    const queryParams = `?pageSize=${postperchange}&page=${currentpage}`;\n    this.http\n      .get<{ message: string; posts: any, maxPosts: number }>(\n        'articles' + queryParams\n      )\n      .pipe(map((postData) => {\n        return {posts: postData.posts.map(post => {\n          console.log(post);\n          return {\n            title: post.title,\n            body: post.body,\n            id: post._id,\n           author: post.author\n          };\n        }), maxPosts: postData.maxPosts};\n      }))\n      .subscribe(transformedPostsData => {\n        this.posts = transformedPostsData.posts;\n        this.postsUpdated.next({posts: [...this.posts], postCount: transformedPostsData.maxPosts});\n      });\n  }\n\n  getPostUpdateListener() {\n    return this.postsUpdated.asObservable();\n  }\n\n  getPost(id: string) {\n    return this.http.get<{_id: string, title: string, body: string, author: string}>('articles/' + id);\n  }\n\n  addPost(title: string, body: string, author: string) {\n   const postData : Post1 ={title: title,content:body,author: author};\n   console.log(postData);\n   this.http\n      .post<{ message: string, post: Post }>('articles', postData)\n      .subscribe(responseData => {\n         this.router.navigate(['/']);\n      });\n  }      \n\n\n}\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}